# 说明：
# - 该文件作为 `galileo init` 生成的 Jupiter 样板，仅覆盖基础运行参数。
# - Mint、DEX 等过滤逻辑请在 `galileo.yaml` 的 `intermedium`/`strategy` 等段维护，再由
#   程序在启动时转换为 CLI 参数，因此这里不再重复配置。

[jupiter.binary]
# Jupiter 二进制下载与安装路径配置。通常保持默认即可，或改为自定义安装目录。
repo_owner = "jup-ag"
repo_name = "jupiter-swap-api"
binary_name = "jupiter-swap-api"
install_dir = "bin"
proxy= "http://127.0.0.1:2080"

# 当使用 JUPITER_URL=http://0.0.0.0:18080 或 JUPITER_URL=http://127.0.0.1:18080 运行机器人时，
# 机器人将首先根据 intermedium 中获取的 mint。然后启动 JupV6 API，并将 FILTER_MARKETS_WITH_MINTS 设置为从 intermedium 提取的 mints。
# mints 数量越多，您获得的机会就越多，因为来自不同代币对的潜在路径越多。然而，数值越高也意味着从 JupV6 API 获取报价的时间越长，
# 并且会占用更多计算机资源。
[jupiter.core]
# 关键运行参数。实际运行时仍可在 `galileo.yaml` 的 `jupiter.launch` 段覆盖。
# 主 RPC，用于订阅账户、抓取市场与报价数据。建议配置为低延迟、稳定的节点。
# 不填时，默认使用 galileo.yaml 中的 global.rpc_url。
rpc_url = ""
# 辅助rpc，部分耗时操作可分摊到副本节点。
secondary_rpc_urls = []
# HTTP 服务监听地址；`0.0.0.0` 支持外部访问，改为 `127.0.0.1` 则仅限本机。
host = "0.0.0.0"
# HTTP 服务端口，默认与 Jupiter 官方脚本一致。
port = 18080
# Prometheus 指标端点端口，对应 `/metrics`。
metrics_port = 18081
# 当设置为 true 时，它​​将从本地文件 mainnet.json 加载市场缓存。当你运行 jup 时，
# 如果启动速度很慢，甚至出现 error reading a body from connection 错误，
# 这个选项会很有用。你可以使用 wget https://cache.jup.ag/markets?v=4 -O markets.json 更新本地文件。
# 如果开启，market_mode 会自动切换为 file。
use_local_market_cache = true
# 如果开启，则只保留 included_dexes 中的市场；否则保留所有市场。
exclude_other_dex_program_ids = true
# 市场快照地址，可使用官方缓存或自建文件（建议以 `./bin/` 为前缀指向下载结果）。
market_cache = "./bin/markets.json"
# 当启用本地缓存时，每次启动都会从该 URL 重新下载最新缓存。
market_cache_download_url = "https://cache.jup.ag/markets?v=4"
# 市场模式，可选值：`remote`（固定快照）、`file`（本地文件）、`europa`（实时推送）。
market_mode = "remote"

[jupiter.launch]
# 允许输入/输出 mint 相同的环形套利路径。
allow_circular_arbitrage = true
# 启用最新接入的 DEX，便于第一时间覆盖行情。
enable_new_dexes = true
# 暴露 `/quote-and-simulate` 调试接口，便于一次请求同时获取模拟结果。
expose_quote_and_simulate = true

[jupiter.launch.yellowstone]
# 若接入 Yellowstone Geyser，则填写对应的 gRPC 入口；否则可删除本段。
# Yellowstone gRPC 服务地址（支持 https://host:port 格式）。
# 不填时，默认使用 galileo.yaml 中的 bot.yellowstone_grpc_url。 
endpoint = ""
# Yellowstone 的认证 token（如需）。
# 不填时，默认使用 galileo.yaml 中的 bot.yellowstone_grpc_token。
x_token = ""


# Jup uses thread for 3 things: webserver, update, router. You can config thread count for webserver and update, the rest of the cores will be used for router.
# Router thread is handling the workload to find the best route for each quote request. This can be heavy especially when you have USE_DIRECT_ROUTE_ONLY false.
# Make sure you leave some cores beside WEBSERVER_THREAD_COUNT and UPDATE_THREAD_COUNT for routing calculation.
[jupiter.performance]
# 根据机器资源调整线程数。总线程数应大于等于 webserver/update。
# Jupiter 进程可用线程总量，建议与 CPU 核心数量匹配或稍大。
total_thread_count = 12
# HTTP/WebServer 线程数，承担 API 请求处理。
webserver_thread_count = 4
# 市场/缓存更新线程数，影响行情刷新效率。
update_thread_count = 4

[jupiter.process]
# 定期自动重启 Jupiter 进程的间隔（分钟）；0 表示不自动重启。
auto_restart_minutes = 60
# 自动重启失败的最大尝试次数，防止无限重启。
max_restart_attempts = 3
# 优雅关闭等待时间（毫秒），用于退出时清理资源。
graceful_shutdown_timeout_ms = 5000

[jupiter.environment]
# 追加给 `jupiter-swap-api` 的环境变量。
# 默认日志级别，可改为 `debug`/`trace` 以便排查。
RUST_LOG = "info"

[jupiter.health_check]
# Jupiter 启动后的健康检查 URL，Galileo 会轮询该地址以确认服务可用。
url = "http://127.0.0.1:18080/health"
# 健康检查超时（秒）。
timeout = 360
# 预期返回的 HTTP 状态码。
expected_status = 200
