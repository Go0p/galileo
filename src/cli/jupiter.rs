use anyhow::{Result, anyhow};
use tracing::info;

use crate::cli::args::JupiterCmd;
use crate::jupiter::{BinaryStatus, JupiterBinaryManager};

/// Jupiter Â≠êÂëΩ‰ª§Â§ÑÁêÜÔºöÂ∞ÅË£Ö‰∫åËøõÂà∂ÁîüÂëΩÂë®ÊúüÁÆ°ÁêÜ„ÄÇ
pub async fn handle_jupiter_cmd(cmd: JupiterCmd, manager: &JupiterBinaryManager) -> Result<()> {
    match cmd {
        JupiterCmd::Start { force_update } => {
            manager.start(force_update).await?;
            if manager.disable_local_binary {
                info!(
                    target: "jupiter",
                    "Êú¨Âú∞ Jupiter ‰∫åËøõÂà∂Â∑≤Á¶ÅÁî®Ôºåstart ÂëΩ‰ª§‰ªÖÁî®‰∫éËøúÁ´ØÊ®°ÂºèÔºåÁõ¥Êé•ËøîÂõû"
                );
                return Ok(());
            }

            info!(
                target: "jupiter",
                "Jupiter ‰∫åËøõÂà∂Â∑≤ÂêØÂä®ÔºåÊåâ Ctrl+C ÂÅúÊ≠¢Âπ∂ÈÄÄÂá∫ÂâçÂè∞Êó•Âøó"
            );
            tokio::signal::ctrl_c()
                .await
                .map_err(|err| anyhow!("ÊçïËé∑ Ctrl+C Â§±Ë¥•: {err}"))?;
            info!(target: "jupiter", "Êî∂Âà∞ÁªàÊ≠¢‰ø°Âè∑ÔºåÊ≠£Âú®ÂÅúÊ≠¢ Jupiter ‰∫åËøõÂà∂‚Ä¶");
            manager.stop().await?;
        }
        JupiterCmd::Stop => {
            manager.stop().await?;
        }
        JupiterCmd::Restart => {
            manager.restart().await?;
        }
        JupiterCmd::Update { version } => {
            manager.update(version.as_deref()).await?;
        }
        JupiterCmd::Status => {
            if manager.disable_local_binary {
                println!("status: üö´ Â∑≤Á¶ÅÁî®Êú¨Âú∞ JupiterÔºà‰∫åËøõÂà∂‰∏çËøêË°åÔºå‰ΩøÁî®ËøúÁ®ã APIÔºâ");
            } else {
                let status = manager.status().await;
                let (emoji, label) = status_indicator(status);
                println!("status: {emoji} {label} ({status:?})");
                let binary_path = manager.config.binary_path();
                println!("binary: {binary_path}", binary_path = binary_path.display());

                match manager.installed_version().await {
                    Ok(Some(version)) => println!("version: üéØ {version}"),
                    Ok(None) => println!("version: ‚ùî Êú™Ê£ÄÊµãÂà∞Â∑≤ÂÆâË£ÖÁöÑ‰∫åËøõÂà∂"),
                    Err(err) => println!("version: ‚ö†Ô∏è Ëé∑ÂèñÂ§±Ë¥•Ôºö{err}"),
                };
            }
        }
        JupiterCmd::List { limit } => {
            let releases = manager.list_releases(limit).await?;
            for (idx, release) in releases.iter().enumerate() {
                println!("{:<2} {}", idx + 1, release.tag_name);
            }
        }
    }
    Ok(())
}

fn status_indicator(status: BinaryStatus) -> (&'static str, &'static str) {
    match status {
        BinaryStatus::Running => ("üöÄ", "ËøêË°å‰∏≠"),
        BinaryStatus::Starting => ("‚è≥", "ÂêØÂä®‰∏≠"),
        BinaryStatus::Updating => ("‚¨áÔ∏è", "Êõ¥Êñ∞‰∏≠"),
        BinaryStatus::Stopping => ("üõë", "ÂÅúÊ≠¢‰∏≠"),
        BinaryStatus::Stopped => ("‚õî", "Â∑≤ÂÅúÊ≠¢"),
        BinaryStatus::Failed => ("‚ö†Ô∏è", "Â§±Ë¥•"),
    }
}
