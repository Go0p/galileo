# DFlow Swap Instructions 接口说明

## 请求体（`application/json`）

| 字段 | 类型 | 必填 | 中文说明 |
| --- | --- | --- | --- |
| `quoteResponse` | object | 是 | `/quote` 接口返回的原始响应，作为构建指令的输入。字段定义见 `quote.txt`。 |
| `userPublicKey` | string | 是 | 交易发起人的钱包地址（Base58）。 |
| `computeUnitPriceMicroLamports` | integer | 否 | 每个 compute unit 的出价，单位 micro-lamports。与 `prioritizationFeeLamports` 互斥，数值需 `>= 0`。 |
| `createFeeAccount` | object | 否 | 指定在缺少平台手续费账户时自动创建，详见下文。 |
| `destinationTokenAccount` | object \| string | 否 | 指定输出代币的接收账户，支持地址字符串或对象参数，详见下文。 |
| `dynamicComputeUnitLimit` | boolean | 否 | `true` 时服务端会先模拟并估算所需 CU；默认使用系统默认值。 |
| `feeAccount` | string | 否 | 平台手续费接收的 Token 账户地址，需与手续费所用 Mint 匹配。 |
| `includeJitoSandwichMitigationAccount` | boolean | 否 | `true` 时在交易中加入 Jito 的反三明治账户（用于 `SetComputeUnitLimit` 指令）。 |
| `positiveSlippage` | object | 否 | 正滑点分润配置，详见下文。 |
| `preserveInputAta` | boolean | 否 | `true` 时不会在交易末尾尝试关闭输入 ATA。 |
| `prioritizationFeeLamports` | variant | 否 | 自定义优先费，支持多种写法，与 `computeUnitPriceMicroLamports` 互斥，详见下文。 |
| `sponsor` | string | 否 | 赞助者钱包地址，指定后由赞助者支付交易费并共同签名，可实现免 GAS 体验。 |
| `wrapAndUnwrapSol` | boolean | 否 | 设为 `false` 表示使用包装 SOL（wSOL）进行结算；默认为自动包裹/解包。 |

### `createFeeAccount`

仅当手续费账户不是源自 `["referral_ata", referral_account, mint]` 及程序 `REFER4ZgmyYx9c6He5XfaTMiGfdLwRnkV4RPp9t9iF3` 时才需要显式创建。若指定且账户不存在，交易会先创建该账户，费用由用户承担。字段如下：

| 字段 | 类型 | 必填 | 中文说明 |
| --- | --- | --- | --- |
| `referralAccount` | string | 是 | 与手续费账户关联的推荐人账户地址（Base58）。 |

### `destinationTokenAccount`

用于覆盖默认的输出账户（默认取用户的 ATA）。支持两种形式：

1. **字符串地址**：直接传入 Base58 地址。若输出不是原生 SOL，该账户必须在执行前已初始化，否则 swap 会失败；若输出为原生 SOL，则以该地址作为钱包。
2. **对象参数**：用于指定账户所有者，由服务端推导 ATA，不能用于原生 SOL 输出。

对象形式的字段：

| 字段 | 类型 | 必填 | 中文说明 |
| --- | --- | --- | --- |
| `associatedTokenAccount` | object | 是 | 指定按 owner 派生的 ATA。 |
| `associatedTokenAccount.owner` | string | 是 | 接收账户所有者的 Base58 地址，如 ATA 未初始化会在执行时创建。 |

若希望直接使用已存在的账户，可改用地址字符串并确保提前初始化。

### `positiveSlippage`

正滑点分润设置，允许溢价部分进入指定账户：

| 字段 | 类型 | 必填 | 中文说明 |
| --- | --- | --- | --- |
| `limitPct` | integer | 是 | 正滑点可分润的最大百分比，需 `>= 0`。 |
| `feeAccount` | string | 否 | 接收正滑点的 Token 账户地址，必须与输出 Mint 对应。若平台手续费模式为 `outputMint` 且已指定 `feeAccount`，此字段需为空或与其一致。 |

若 `feeAccount` 无法收款，则正滑点转账会被跳过。

### `prioritizationFeeLamports`

设置交易优先费的多种方式，均与 `computeUnitPriceMicroLamports` 互斥：

- **数值**：`u32`，直接指定支付的 lamports 数量。
- **字符串**：
  - `"auto"`：由服务端自动估算（上限 0.005 SOL）。
  - `"disabled"`：明确不附加优先费。
- **对象**：用于同时限制上限与倍率：
  - `priorityLevelWithMaxLamports`：对象，包含
    - `priorityLevel`：`"medium"`, `"high"` 或 `"veryHigh"`。
    - `maxLamports`：整数，上限，`>= 0`。
  - `autoMultiplier`：整数，自动估算值的倍率，`>= 0`，总费用仍限制在 0.005 SOL 以内。

### 赞助执行（`sponsor`）

若提供 `sponsor`，需由用户与赞助者共同签名。赞助者将承担交易费和代币账户创建费用，可用于实现 gasless swap。

## 成功响应（HTTP 200, `application/json`）

| 字段 | 类型 | 必填 | 中文说明 |
| --- | --- | --- | --- |
| `addressLookupTableAddresses` | array\<string> | 否 | 交易依赖的地址查找表（ALT）地址列表。 |
| `blockhashWithMetadata` | object | 是 | 最近区块哈希及有效高度，包含 `blockhash` 与 `lastValidBlockHeight`。 |
| `cleanupInstructions` | array | 否 | 收尾阶段需要执行的指令列表。 |
| `computeBudgetInstructions` | array | 否 | 与 compute budget 相关的指令，如设置 CU 限额或价格。 |
| `computeUnitLimit` | integer | 否 | 若计算过 CU 限额会返回该值。 |
| `otherInstructions` | array | 否 | 除 setup/swap/cleanup 外的补充指令。 |
| `prioritizationFeeLamports` | integer | 否 | 服务端实际写入的优先费 lamports。 |
| `prioritizationType` | string \| null | 否 | 优先费类型标识，未使用时为 `null`。 |
| `setupInstructions` | array | 否 | 在主交换指令前需执行的准备指令。 |
| `swapInstruction` | object | 是 | 核心 swap 指令（包含 `programId`、`accounts`、`data`）。 |

指令数组中的元素结构均包含：

| 字段 | 类型 | 说明 |
| --- | --- | --- |
| `programId` | string | 执行指令的程序 ID。 |
| `accounts` | array | 参与账户列表，每项含 `pubkey`、`isSigner`、`isWritable`。 |
| `data` | string | Base64 编码的指令数据。 |

### 响应示例

```json
{
  "addressLookupTableAddresses": ["<string>"],
  "blockhashWithMetadata": {
    "blockhash": "<string>",
    "lastValidBlockHeight": 1
  },
  "cleanupInstructions": [
    {
      "accounts": [
        {"isSigner": true, "isWritable": true, "pubkey": "<string>"}
      ],
      "data": "<string>",
      "programId": "<string>"
    }
  ],
  "computeBudgetInstructions": [
    {
      "accounts": [
        {"isSigner": false, "isWritable": false, "pubkey": "<string>"}
      ],
      "data": "<string>",
      "programId": "<string>"
    }
  ],
  "computeUnitLimit": 1,
  "otherInstructions": [
    {
      "accounts": [
        {"isSigner": false, "isWritable": true, "pubkey": "<string>"}
      ],
      "data": "<string>",
      "programId": "<string>"
    }
  ],
  "prioritizationFeeLamports": 1,
  "prioritizationType": null,
  "setupInstructions": [
    {
      "accounts": [
        {"isSigner": true, "isWritable": true, "pubkey": "<string>"}
      ],
      "data": "<string>",
      "programId": "<string>"
    }
  ],
  "swapInstruction": {
    "accounts": [
      {"isSigner": true, "isWritable": true, "pubkey": "<string>"}
    ],
    "data": "<string>",
    "programId": "<string>"
  }
}
```

## 错误响应（HTTP 400 / 500）

```json
{
  "code": "<enum<string>>",
  "msg": "<string>"
}
```

`code` 用于标识错误类型，`msg` 提供详细描述。HTTP 503 与 500 语义一致，但表示服务暂时不可用。
